<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN"
 "../dtd/reference.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<reference id="rrefsyscsdialgtables" xml:lang="en-us">
<title>SYSCS_DIAG diagnostic tables and functions</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> provides
a set of system table expressions which you can use to obtain diagnostic information
about the state of the database and about the database sessions. </shortdesc>
<prolog><metadata>
<keywords><indexterm>diagnostic table functions<indexterm>SYSCS_DIAG.ERROR_LOG_READER</indexterm></indexterm>
<indexterm>SYSCS_DIAG.ERROR_LOG_READER diagnostic table function</indexterm>
<indexterm>diagnostic tables<indexterm>SYSCS_DIAG.ERROR_MESSAGES</indexterm></indexterm>
<indexterm>SYSCS_DIAG.ERROR_MESSAGES diagnostic table</indexterm><indexterm>diagnostic
table functions<indexterm>SYSCS_DIAG.LOCK_TABLE</indexterm></indexterm><indexterm>SYSCS_DIAG.LOCK_TABLE
diagnostic table</indexterm><indexterm>diagnostic table functions<indexterm>SYSCS_DIAG.SPACE_TABLE</indexterm></indexterm>
<indexterm>SYSCS_DIAG.SPACE_TABLE diagnostic table function</indexterm><indexterm>diagnostic
tables<indexterm>SYSCS_DIAG.STATEMENT_CACHE</indexterm></indexterm><indexterm>SYSCS_DIAG.STATEMENT_CACHE
diagnostic table</indexterm><indexterm>diagnostic table functions<indexterm>SYSCS_DIAG.STATEMENT_DURATION</indexterm></indexterm>
<indexterm>SYSCS_DIAG.STATEMENT_DURATION diagnostic table functions</indexterm>
<indexterm>diagnostic tables<indexterm>SYSCS_DIAG.TRANSACTION_TABLE</indexterm></indexterm>
<indexterm>SYSCS_DIAG.TRANSACTION_TABLE diagnostic table</indexterm>
<indexterm>diagnostic tables<indexterm>SYSCS_DIAG.TRANSACTION_TABLE</indexterm></indexterm>
<indexterm>SYSCS_DIAG.CONTAINED_ROLES diagnostic table function</indexterm>
<indexterm>diagnostic table functions<indexterm>SYSCS_DIAG.CONTAINED_ROLES</indexterm></indexterm>
</keywords>
</metadata></prolog>
<refbody>
<section> <p>There are two types of diagnostic table expressions in <ph conref="../conrefs.dita#prod/productshortname"></ph>:<dl>
<dlentry>
<dt>Diagnostic tables</dt>
<dd>Tables that are like any other table in <ph conref="../conrefs.dita#prod/productshortname"></ph>.
You can specify the diagnostic table name anywhere a normal table name is
allowed.</dd>
</dlentry><dlentry>
<dt>Diagnostic table functions</dt>
<dd>Functions that are like any other function in <ph conref="../conrefs.dita#prod/productshortname"></ph>.
Diagnostic table functions can accept zero or more arguments, depending on
the table function that you use. You must use the SQL-defined table function
syntax to access these functions.</dd>
</dlentry></dl> </p><p>The following table shows the types and names of the
diagnostic table expressions in <ph conref="../conrefs.dita#prod/productshortname"></ph>. </p><table>
<title>System diagnostic table expressions provided by <ph conref="../conrefs.dita#prod/productshortname"></ph></title>
<tgroup cols="2"><colspec colname="col1" colwidth="50*"/><colspec colname="col2"
colwidth="49*"/>
<thead>
<row valign="bottom">
<entry colname="col1">Diagnostic table expression</entry>
<entry colname="col2">Type of expression</entry>
</row>
</thead>
<tbody>
<row>
<entry colname="col1">SYSCS_DIAG.CONTAINED_ROLES</entry>
<entry colname="col2">Table function</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.ERROR_LOG_READER</entry>
<entry colname="col2">Table function</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.ERROR_MESSAGES</entry>
<entry colname="col2">Table</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.LOCK_TABLE</entry>
<entry colname="col2">Table</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.SPACE_TABLE</entry>
<entry colname="col2">Table function</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.STATEMENT_CACHE</entry>
<entry colname="col2">Table</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.STATEMENT_DURATION</entry>
<entry colname="col2">Table function</entry>
</row>
<row>
<entry colname="col1">SYSCS_DIAG.TRANSACTION_TABLE </entry>
<entry colname="col2">Table</entry>
</row>
</tbody>
</tgroup>
</table><note type="restriction">If you reference a diagnostic table in
a DDL statement or a compression procedure, <ph conref="../conrefs.dita#prod/productshortname"></ph> returns
an exception.</note></section>
<section><title>SYSCS_DIAG.CONTAINED_ROLES diagnostic table function</title>
<p>The SYSCS_DIAG.CONTAINED_ROLES diagnostic table function returns all the
roles contained within the specified role. For a definition of role containment,
see "Syntax for roles" in
<xref href="rrefsqljgrant.dita#rrefsqljgrant/grantrolesyn">GRANT
statement</xref>.</p>
<p>For example:</p>
<codeblock>SELECT * FROM TABLE (SYSCS_DIAG.CONTAINED_ROLES(reader))</codeblock>
</section>
<section><title>SYSCS_DIAG.ERROR_LOG_READER diagnostic table function</title><p>The
SYSCS_DIAG.ERROR_LOG_READER diagnostic table function contains all the useful
SQL statements that are in the <filepath>derby.log</filepath> file or a log
file that you specify. </p><p>One use of this diagnostic table function is
to determine the active transactions and the SQL statements in those transactions
at a given point in time. For example, if a deadlock or lock timeout occurred
you can find the timestamp (timestampConstant) in the error log.</p><p>To
access the SYSCS_DIAG.ERROR_LOG_READER diagnostic table function, you must
use the SQL table function syntax.</p><p>For example:<codeblock>SELECT * 
    FROM TABLE (SYSCS_DIAG.ERROR_LOG_READER()) 
    AS T1</codeblock>where T1 is a user-specified table name that is any valid
identifier.</p><p>You can specify a log file name as an optional argument
to the SYSCS_DIAG.ERROR_LOG_READER diagnostic table function. When you specify
a log file name, the file name must be an expression whose data type maps
to a Java string.</p><p>For example:<codeblock>SELECT * 
    FROM TABLE (SYSCS_DIAG.ERROR_LOG_READER('myderbyerrors.log')) 
    AS T1</codeblock></p><p><note type="tip"> By default <ph conref="../conrefs.dita#prod/productshortname"></ph> log
files contain only boot, shutdown, and error messages.
See the
<codeph><xref href="rrefproper26985.dita#rrefproper26985">derby.stream.error.logSeverityLevel</xref></codeph>
property and the
<codeph><xref href="rrefproper43517.dita#rrefproper43517">derby.language.logStatementText</xref></codeph>
property for
instructions on how to print more information to <ph conref="../conrefs.dita#prod/productshortname"></ph> log
files. You can then query that information by using the SYSCS_DIAG.ERROR_LOG_READER
diagnostic table function. </note></p></section>
<section><title>SYSCS_DIAG.ERROR_MESSAGES diagnostic table</title><p>The SYSCS_DIAG.ERROR_MESSAGES
diagnostic table shows all of the SQLStates, locale-sensitive error messages,
and exception severities for a <ph conref="../conrefs.dita#prod/productshortname"></ph> database.
You can reference the SYSCS_DIAG.ERROR_MESSAGES diagnostic table directly
in a statement.</p><p>For example:<codeblock>SELECT * FROM SYSCS_DIAG.ERROR_MESSAGES</codeblock></p></section>
<section><title>SYSCS_DIAG.LOCK_TABLE diagnostic table</title><p>The SYSCS_DIAG.LOCK_TABLE
diagnostic table shows all of the locks that are currently held in the <ph
conref="../conrefs.dita#prod/productshortname"></ph> database.  You can reference
the SYSCS_DIAG.LOCK_TABLE diagnostic table directly in a statement.</p><p>For
example:<codeblock>SELECT * FROM SYSCS_DIAG.LOCK_TABLE</codeblock></p><p>When
the SYSCS_DIAG.LOCK_TABLE diagnostic table is referenced in a statement, a
snap shot of the lock table is taken.  A snap shot is used so that referencing
the diagnostic table does not alter the normal timing and flow of the application.
 It is possible that some locks will be in a transition state when the snap
shot is taken. </p></section>
<section><title>SYSCS_DIAG.SPACE_TABLE diagnostic table function</title><p>The
SYSCS_DIAG.SPACE_TABLE diagnostic table function shows the space usage of
a particular table and its indexes. You can use this diagnostic table function
to determine if space might be saved by compressing the table and indexes.</p><p>To
access the SYSCS_DIAG.SPACE_TABLE diagnostic table function, you must use
the SQL table function syntax. This diagnostic table function takes two arguments,
the <parmname>schemaName</parmname> and the <parmname>tableName</parmname>.
The <parmname>tableName</parmname> argument is required. If you do not specify
the <parmname>schemaName</parmname>, the current schema is used. </p><p>For
example, use the following query to return the space usage for all of the
user tables and indexes in the database: <codeblock>SELECT T2.*
    FROM 
        SYS.SYSTABLES systabs,
        TABLE (SYSCS_DIAG.SPACE_TABLE(systabs.tablename)) AS T2
    WHERE systabs.tabletype = 'T'</codeblock>where T2 is a user-specified
table name that is any valid identifier. </p><p>Both the <parmname>schemaName</parmname> and
the <parmname>tableName</parmname> arguments must be expressions whose data
types map to Java strings. If the <parmname>schemaName</parmname> and the <parmname>tableName</parmname> are
non-delimited identifiers, you must specify the names in upper case.</p><p>For
example: <codeblock>SELECT * 
    FROM TABLE (SYSCS_DIAG.SPACE_TABLE('MYSCHEMA', 'MYTABLE')) 
    AS T2</codeblock></p></section>
<section><title>SYSCS_DIAG.STATEMENT_CACHE diagnostic table</title><p>The
SYSCS_DIAG.STATEMENT_CACHE diagnostic table shows the contents of the SQL
statement cache. You can reference the SYSCS_DIAG.STATEMENT_CACHE diagnostic
table directly in a statement.</p><p>For example:<codeblock>SELECT * FROM SYSCS_DIAG.STATEMENT_CACHE</codeblock></p></section>
<section><title>SYSCS_DIAG.STATEMENT_DURATION diagnostic table function</title><p>You
can use the SYSCS_DIAG.STATEMENT_DURATION diagnostic table function to analyze
the <term>execution duration</term> of the useful SQL statements in the <filepath>derby.log</filepath> file
or a log file that you specify. </p><p>You can also use this diagnostic table
function to get an indication of where the bottlenecks are in the JDBC code
for an application.</p><p>To access the SYSCS_DIAG.STATEMENT_DURATION diagnostic
table function, you must use the SQL table function syntax.</p><p>For example:<codeblock>SELECT * 
    FROM TABLE (SYSCS_DIAG.STATEMENT_DURATION()) 
    AS T1</codeblock>where T1 is a user-specified table name that is any valid
identifier.</p><note type="restriction">For each transaction ID, a row is
not returned for the last statement with that transaction id. Transaction
IDs change within a connection after a commit or rollback, if the transaction
that just ended modified data.</note><p>You can specify a log file name as
an optional argument to the SYSCS_DIAG.STATEMENT_DURATION diagnostic table
function. When you specify a log file name, the file name must be an expression
whose data type maps to a Java string.</p><p>For example:<codeblock>SELECT * 
    FROM TABLE (SYSCS_DIAG.STATEMENT_DURATION('somederby.log')) 
    AS T1</codeblock></p><p><note type="tip"> By default <ph conref="../conrefs.dita#prod/productshortname"></ph> log
files contain only boot, shutdown, and error messages.
See the
<codeph><xref href="rrefproper26985.dita#rrefproper26985">derby.stream.error.logSeverityLevel</xref></codeph>
property and the
<codeph><xref href="rrefproper43517.dita#rrefproper43517">derby.language.logStatementText</xref></codeph>
property for
instructions on how to print more information to <ph conref="../conrefs.dita#prod/productshortname"></ph> log
files. You can then query that information by using the SYSCS_DIAG.STATEMENT_DURATION
diagnostic table function. </note></p></section>
<section><title>SYSCS_DIAG.TRANSACTION_TABLE  diagnostic table</title><p>The
SYSCS_DIAG.TRANSACTION_TABLE  diagnostic table shows all of the transactions
that are currently in the database. You can reference the SYSCS_DIAG.TRANSACTION_TABLE
 diagnostic table directly in a statement.</p><p>For example:<codeblock>SELECT * FROM SYSCS_DIAG.TRANSACTION_TABLE</codeblock></p><p>When
the SYSCS_DIAG.TRANSACTION_TABLE  diagnostic table is referenced in a statement,
a snap shot of the transaction table is taken.  A snap shot is used so that
referencing the diagnostic table does not alter the normal timing and flow
of the application.  It is possible that some transactions will be in a transition
state when the snap shot is taken. </p></section>
</refbody>
</reference>
