<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevdvlp22619" xml:lang="en-us">
<title>Working with database threads in an embedded environment</title>
<shortdesc>Do not use <codeph><i>interrupt</i></codeph> calls to notify threads
that are accessing a database, because <ph conref="../conrefs.dita#prod/productshortname"></ph> will
catch the <codeph><i>interrupt</i></codeph> call and close the connection
to the database. Use <codeph><i>wait</i></codeph> and <codeph><i>notify</i></codeph> calls
instead.</shortdesc>
<prolog><metadata>
<keywords><indexterm>Threads<indexterm>sleep and interrupt calls</indexterm><indexterm>notifying</indexterm></indexterm>
<indexterm>interrupt calls<indexterm>caught by Derby</indexterm></indexterm>
</keywords>
</metadata></prolog>
<conbody>
<p>This will not happen in a client/server environment, but if you want your
application to work in either environment it is good practice to follow this
rule.</p>
<p>There are also special considerations when working with more than one database
thread in an application.</p>
</conbody>
</concept>
