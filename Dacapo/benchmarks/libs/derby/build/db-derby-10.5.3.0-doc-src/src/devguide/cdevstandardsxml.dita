<?xml version="1.0" encoding="utf-8"?>
 
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "../dtd/concept.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

   http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<concept id="cdevstandardsxml" xml:lang="en-us">
<title>XML data types and operators</title>
<shortdesc><ph conref="../conrefs.dita#prod/productshortname"></ph> supports
the XML data type and a set of operators that work with the XML data type,
but does not provide JDBC support for the XML data type.
The XML data type and operators are based on a small subset of the SQL/XML
specification. </shortdesc>
<prolog><metadata>
<keywords><indexterm>SQL standards<indexterm>XML data types and operators</indexterm></indexterm>
<indexterm>XML data types<indexterm>SQL standard</indexterm></indexterm><indexterm>XML
data types<indexterm>limitations</indexterm></indexterm></keywords>
</metadata></prolog>
<conbody>
<p>The XML data type and operators are defined only in the SQL layer.</p>
<p>There is no JDBC-side support for XML data types. It is not possible to
bind directly into an XML value or to retrieve an XML value directly from
a result set.  Instead, you must bind and retrieve the XML data as Java strings
or character streams by explicitly specifying the appropriate XML operator
as part of the SQL statements:<ul>
<li>Use the XMLPARSE operator for binding data into XML values.</li>
<li>Use the XMLSERIALIZE operator to retrieve XML values from a result set.</li>
</ul> Additionally, there is no JDBC metadata support for the XML data type.</p>
<p>The XML data type is not allowed in any of the clauses or operations that
are described in the section on expressions on LONG data types in 
<xref href="cdevstandards806118.dita#cdevstandards806118"></xref>.</p>
<p>For the XML operators to work properly, <ph conref="../conrefs.dita#prod/productshortname"></ph> requires
that a JAXP parser, such as Apache Xerces, and Apache Xalan are included in
the Java classpath. If either the parser or Xalan are missing from the classpath, <ph
conref="../conrefs.dita#prod/productshortname"></ph> disallows any XML-related
operations.  </p>
<section><title>Classpath and version issues</title>
<p>Most Java virtual machines (JVMs) that are version 1.4 or later have
a JAXP parser embedded in the JVM. If you are using one of these JVMs, you
may not need to add any classes to your classpath. Some exceptions exist:</p>
<ul>
<li>In most version 1.4.2 JVMs, the version of Xalan that comes with the JVM is 
not new enough, so you must override the version of Xalan in the JVM with a
newer version by using the Endorsed Standards Override Mechanism described at
<xref format="html" href="http://java.sun.com/j2se/1.4.2/docs/guide/standards/"
scope="external">http://java.sun.com/j2se/1.4.2/docs/guide/standards/</xref>. To
use this mechanism, download and install a binary distribution of Xalan from
Apache and set the system property <codeph>java.endorsed.dirs</codeph> to point
to the Xalan installation directory.</li>
<li>In Sun JVMs later than version 1.4, Sun has renamed the JAXP packages so that
<ph conref="../conrefs.dita#prod/productshortname"></ph> cannot access them. If
you are using a Sun JVM later than version 1.4, download and install a binary
distribution of Xalan from Apache and place the <codeph>xalan.jar</codeph> file
in your classpath. The <codeph>xalan.jar</codeph> file automatically puts into
the classpath the other required jars that are in the same directory.</li>
</ul>
</section>
</conbody>
</concept>
