<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN"
 "../dtd/task.dtd">
<!-- 
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at      

http://www.apache.org/licenses/LICENSE-2.0  

Unless required by applicable law or agreed to in writing, software  
distributed under the License is distributed on an "AS IS" BASIS,  
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  
See the License for the specific language governing permissions and  
limitations under the License.
-->
<task id="tgsactivity4" xml:lang="en-us">
<title>Activity 4: Create and run a JDBC program using the client driver and
Network Server</title>
<shortdesc>This activity demonstrates the ease with which a program that embeds <ph
conref="../conrefs.dita#prod/productshortname"></ph> can be modified for a
 client/server implementation that uses the  <ph conref="../conrefs.dita#prod/productshortname"></ph> Network
Server. </shortdesc>
<prolog><metadata>
<keywords><indexterm>WwdClient.java program<indexterm>org.apache.derby.jdbc.ClientDriver</indexterm></indexterm>
</keywords>
</metadata></prolog>
<taskbody>
<prereq>This activity assumes you have performed the preceding activities
and have a working directory called <codeph>DERBYTUTOR</codeph>, and have
copies of the program files from the <codeph>$<ph conref="../conrefs.dita#prod/productinstallpath"></ph>/demo/programs/workingwithderby/</codeph> 
directory. A basic knowledge of the <codeph>WwdEmbedded.java</codeph> program
and experience starting and connecting to the Network Server are helpful.
You will need to use a text editor to create the <codeph>WwdClient.java</codeph> 
program.</prereq>
<context>You will create a <ph conref="../conrefs.dita#prod/productshortname"></ph> client
program,  <codeph>WwdClient.java</codeph>, by changing a few lines of the  <codeph>WwdEmbedded.java</codeph> program.
You can run the client program in multiple command shells, allowing simultaneous
update from two or more sources. <p>You use two command windows (Server-Shell
and Client-Shell) in this activity. You use the Server-Shell to start the <ph
conref="../conrefs.dita#prod/productshortname"></ph> Network Server and  display
Network Server messages. You use the Client-Shell to edit, compile and run
the newly created <codeph>WwdClient.java</codeph> program. You set the  <codeph>CLASSPATH</codeph> environment
variable in the Client-Shell to support the client JDBC program.</p></context>
<steps>
<step><cmd>Create the <codeph>WwdClient</codeph> program using the following
 steps:</cmd>
<substeps>
<substep><cmd>Open a command window (Client-Shell).</cmd></substep>
<substep><cmd>Change to the  <codeph>DERBYTUTOR</codeph> directory.</cmd>
</substep>
<substep><cmd>Make a copy of the <codeph>WwdEmbedded.java</codeph> program
called <codeph>WwdClient.java</codeph>.</cmd><stepxmp> <simpletable relcolwidth="1* 4*">
<sthead>
<stentry>Operating System</stentry>
<stentry>Command</stentry>
</sthead>
<strow>
<stentry><lines>UNIX
(Korn Shell)</lines></stentry>
<stentry><codeblock><b><userinput>cp WwdEmbedded.java WwdClient.java</userinput></b></codeblock></stentry>
</strow>
<strow>
<stentry><lines>Windows</lines></stentry>
<stentry><codeblock><b><userinput>copy WwdEmbedded.java WwdClient.java</userinput></b></codeblock></stentry>
</strow>
</simpletable> </stepxmp></substep>
<substep><cmd>Open the <codeph>WwdClient.java</codeph> file in a text editor
and update the class name to reflect the new file name:</cmd><stepxmp><codeblock><b>Original declaration</b>
     public class WwdEmbedded

<b>New declaration</b>
     public class <b>WwdClient</b>
</codeblock></stepxmp></substep>
<substep><cmd>Edit the <cite>DEFINE VARIABLES SECTION</cite> of the program
so that the <codeph>driver</codeph> variable contains the name of the  <ph
conref="../conrefs.dita#prod/productshortname"></ph> client driver class and
the <codeph>connectionURL</codeph> variable contains the hostname and port
number of the Network Server.</cmd><stepxmp><codeblock><b>Original definitions</b>
     String driver = "org.apache.derby.jdbc.EmbeddedDriver";
     String dbName="jdbcDemoDB";
     String connectionURL = "jdbc:derby:" + dbName + ";create=true";

<b>New definitions</b>
     String driver = <b>"org.apache.derby.jdbc.ClientDriver"</b>;
     ...
     String connectionURL = <b>"jdbc:derby://localhost:1527/"</b> + dbName + ";create=true";
</codeblock></stepxmp></substep>
<substep><cmd>Compile the application.</cmd><stepxmp><codeblock><b><userinput>javac WwdClient.java</userinput></b>
</codeblock> </stepxmp><stepresult>A command prompt appears if the compilation
is successful. The  binary file <codeph>WwdClient.class</codeph> is created.
If an error message  appears, modify the line indicated so that it is identical
to the example. </stepresult></substep>
</substeps>
</step>
<step><cmd>Set up the client/server environment using the following steps:</cmd>
<substeps>
<substep><cmd>Open a command window (Server-Shell).</cmd></substep>
<substep><cmd>Change to the <codeph>DERBYTUTOR</codeph>  directory.</cmd>
</substep>
<substep><cmd>Start the Network Server:</cmd><stepxmp> <simpletable relcolwidth="1* 4*">
<sthead>
<stentry>Operating System</stentry>
<stentry>Command</stentry>
</sthead>
<strow>
<stentry><lines>UNIX
(Korn Shell)</lines></stentry>
<stentry><codeblock><b><userinput>java -jar $DERBY_HOME/lib/derbyrun.jar server start</userinput></b>
2009-05-08 17:24:16.031 GMT : Security manager
 installed using the Basic server security policy.
2009-05-08 17:24:16.665 GMT : Apache Derby Network
 Server - 10.5.1.1 - (764942) started and ready to
 accept connections on port 1527</codeblock></stentry>
</strow>
<strow>
<stentry><lines>Windows</lines></stentry>
<stentry><codeblock><b><userinput>java -jar %DERBY_HOME%\lib\derbyrun.jar server start</userinput></b>
2009-05-08 17:24:16.031 GMT : Security manager
 installed using the Basic server security policy.
2009-05-08 17:24:16.665 GMT : Apache Derby Network
 Server - 10.5.1.1 - (764942) started and ready to
 accept connections on port 1527</codeblock></stentry>
</strow>
</simpletable> </stepxmp></substep>
</substeps>
</step>
<step><cmd>Run the client program using the following steps:</cmd>
<substeps>
<substep><cmd>Return to the Client-Shell window.</cmd></substep>
<substep><cmd>If not already set, set the <codeph>CLASSPATH</codeph> environment
variable to include the  location of the file <codeph>derbyclient.jar</codeph>:</cmd>
<stepxmp> <simpletable relcolwidth="1* 4*">
<sthead>
<stentry>Operating System</stentry>
<stentry>Command</stentry>
</sthead>
<strow>
<stentry><lines>UNIX
(Korn Shell)</lines></stentry>
<stentry><codeblock><b><userinput>export CLASSPATH=$DERBY_HOME/lib/derbyclient.jar:.</userinput></b></codeblock></stentry>
</strow>
<strow>
<stentry><lines>Windows</lines></stentry>
<stentry><codeblock><b><userinput>set CLASSPATH=%DERBY_HOME%\lib\derbyclient.jar;.</userinput></b></codeblock></stentry>
</strow>
</simpletable> <note type="important">Include the dot (<codeph>.</codeph>)
at the end of the  command so that your current working directory is included
in the classpath. </note> </stepxmp></substep>
<substep><cmd>Run the program:</cmd><stepxmp> <codeblock><b><userinput>java WwdClient</userinput></b>
<systemoutput>org.apache.derby.jdbc.ClientDriver loaded.
Connected to database jdbcDemoDB
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>a sunny day</userinput></b>
<systemoutput>  __________________________________________________________
On 2009-05-08 13:12:09.058 I wished for a peppermint stick
On 2009-05-08 13:12:21.28 I wished for a long vacation
On 2009-05-08 13:27:22.581 I wished for a sunny day
  __________________________________________________________
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>a new car</userinput></b>
<systemoutput>  __________________________________________________________
On 2009-05-08 13:12:09.058 I wished for a peppermint stick
On 2009-05-08 13:12:21.28 I wished for a long vacation
On 2009-05-08 13:27:22.581 I wished for a sunny day
On 2009-05-08 13:27:42.105 I wished for a new car
  __________________________________________________________
Enter wish-list item (enter exit to end):</systemoutput>
<b><userinput>exit</userinput></b>
<systemoutput>Closed connection
Getting Started With Derby JDBC program ending.</systemoutput></codeblock> </stepxmp>
</substep>
</substeps>
</step>
<step><cmd>Shut down the Network Server:</cmd><stepxmp> <simpletable relcolwidth="1* 4*">
<sthead>
<stentry>Operating System</stentry>
<stentry>Command</stentry>
</sthead>
<strow>
<stentry><lines>UNIX
(Korn Shell)</lines></stentry>
<stentry><codeblock><b><userinput>java -jar $DERBY_HOME/lib/derbyrun.jar server shutdown</userinput></b>
<systemoutput>2009-05-08 17:28:47.171 GMT : Apache Derby Network
 Server - 10.5.1.1 - (764942) shutdown</systemoutput>
</codeblock></stentry>
</strow>
<strow>
<stentry><lines>Windows</lines></stentry>
<stentry><codeblock><b><userinput>java -jar %DERBY_HOME%\lib\derbyrun.jar server shutdown</userinput></b>
<systemoutput>2009-05-08 17:28:47.171 GMT : Apache Derby Network
 Server - 10.5.1.1 - (764942) shutdown</systemoutput>
</codeblock></stentry>
</strow>
</simpletable> </stepxmp><stepresult>The server shutdown confirmation appears
in both command windows.</stepresult></step>
</steps>
<postreq><b>Activity notes</b> <p>In a client/server environment, the client
program is often used from other computers on the network. Whenever a system
accepts connections from other computers, there is a chance of abuse. To maintain
security, the <ph conref="../conrefs.dita#prod/productshortname"></ph> Network
Server defaults to accepting connections only from clients running on the
local  machine (<codeph>localhost</codeph>). Before this or any other  <ph
conref="../conrefs.dita#prod/productshortname"></ph> client program can access
the Network Server from another machine, additional steps should be taken
to secure the Network Server environment. Once secured, the Network Server
can be safely configured to accept connections from other machines.  Refer
to the "Network Server security" and "Running the Network Server under the
security manager" sections of the  <cite><ph conref="../conrefs.dita#pub/citadmin"></ph></cite> for
important information on securing the Network Server and enabling network
connections.</p><p>With the Network Server started, you can run the client
program simultaneously in multiple windows. To demonstrate this, open two
command windows and perform the substeps of the "Run the client program" step
in  each window. Both clients will operate without a problem. In contrast,
it would  not be possible for a program that uses the embedded driver (for
example, <codeph>WwdEmbedded.java</codeph>) to access the database until the
database or the Network Server is shut down.</p><p>You may have noticed that
the client program does not shut down the database. This is because the database
is a shared resource in a client/server environment and, in most cases, should
be shut down only when the Network Server is shut down. If multiple clients
are accessing the database and one client shuts down the database, the remaining
clients will encounter a failure the next time they attempt an SQL command.</p><p><ph
conref="../conrefs.dita#prod/productshortname"></ph>'s two architectures have
caused confusion for some new  <ph conref="../conrefs.dita#prod/productshortname"></ph> users,
who mistakenly  think that embedded is a single-user configuration. This is
not true. The embedded driver supports multiple simultaneous connections,
performs locking, and provides performance, integrity, and recoverability.
Any application that uses the embedded driver can open multiple  <ph conref="../conrefs.dita#prod/productshortname"></ph> connections
and then provide a means for multiple users to interact with the database
on each connection. The <ph conref="../conrefs.dita#prod/productshortname"></ph> Network
Server is an example of such an application.</p></postreq>
</taskbody>
</task>
